//////////////////////////////////////////////////////////////////////////
template<class T>
stack<T>::stack(const stack& other)
    : container(other.container)
{
}

//////////////////////////////////////////////////////////////////////////
template<class T>
stack<T>& stack<T>::operator=(const stack& rhs)
{
    if (this != &rhs)
    {
        container = rhs.container;
    }
    return *this;
}

//////////////////////////////////////////////////////////////////////////
template<class T>
bool stack<T>::is_empty() const
{
    return container.is_empty();
}

//////////////////////////////////////////////////////////////////////////
template<class T>
void stack<T>::push(const T& data)
{
    container.push_back(data);
}

//////////////////////////////////////////////////////////////////////////
template<class T>
T stack<T>::pop()
{
    return container.pop_back();
}

//////////////////////////////////////////////////////////////////////////
template<class T>
T& stack<T>::peek()
{
    return container.peek_back();
}

//////////////////////////////////////////////////////////////////////////
template<class T>
const T& stack<T>::peek() const
{
    return container.peek_back();
}